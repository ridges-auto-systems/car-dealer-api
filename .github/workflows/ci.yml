# .github/workflows/ci.yml - BULLETPROOF VERSION
name: 🔧 Backend CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18.x'
  REGISTRY: ghcr.io

jobs:
  # ============================================================================
  # CODE QUALITY & SECURITY
  # ============================================================================
  quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🧹 Run ESLint
        run: npm run lint

      - name: 🎨 Check Prettier formatting
        run: npm run format:check

      - name: 🔒 Security audit
        run: npm run security:audit
        continue-on-error: true

  # ============================================================================
  # TESTING WITH DATABASE
  # ============================================================================
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    needs: quality

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: car_dealer_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🗃️ Setup test database
        run: |
          npx prisma migrate deploy
          npm run db:seed
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/car_dealer_test
          CI: true

      - name: 🧪 Run tests
        run: npm test
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/car_dealer_test
          JWT_SECRET: test-secret-key
          CI: true

  # ============================================================================
  # BUILD & PACKAGE - SIMPLE & BULLETPROOF
  # ============================================================================
  build:
    name: 🏗️ Build & Package
    runs-on: ubuntu-latest
    needs: [quality, test]

    permissions:
      contents: read
      packages: write

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Generate Docker Tags (SIMPLE VERSION)
        id: tags
        run: |
          # Extract repository name (convert to lowercase)
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')

          # Get short SHA
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)

          # Base image name
          IMAGE_BASE="${{ env.REGISTRY }}/${REPO_NAME}"

          # Generate tags based on event type
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # For pull requests
            TAGS="${IMAGE_BASE}:pr-${{ github.event.number }}"
          elif [[ "${{ github.ref_name }}" == "main" ]]; then
            # For main branch
            TAGS="${IMAGE_BASE}:latest,${IMAGE_BASE}:main,${IMAGE_BASE}:${SHORT_SHA}"
          else
            # For other branches
            BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9.-]/-/g')
            TAGS="${IMAGE_BASE}:${BRANCH_NAME},${IMAGE_BASE}:${BRANCH_NAME}-${SHORT_SHA}"
          fi

          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "image-base=${IMAGE_BASE}" >> $GITHUB_OUTPUT
          echo "Generated tags: ${TAGS}"

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.tags.outputs.tags }}
          labels: |
            org.opencontainers.image.title=Rides Automotors API
            org.opencontainers.image.description=Backend API service for Rides Automotors
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  # ============================================================================
  # SECURITY SCANNING - SIMPLIFIED
  # ============================================================================
  security:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      security-events: write

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ github.repository }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ============================================================================
  # SUCCESS NOTIFICATION
  # ============================================================================
  notify:
    name: 📢 Success Notification
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: 🎉 Build Success
        run: |
          echo "🚗 Rides Automotors API successfully built!"
          echo "🐳 Docker Image: ghcr.io/${{ github.repository }}:latest"
          echo "📦 SHA: ${{ github.sha }}"
          echo "🌟 Ready for deployment!"
