name: 🔧 Backend CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ============================================================================
  # CODE QUALITY & SECURITY
  # ============================================================================
  quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📥 Install dependencies
      run: npm ci
      
    - name: 🧹 Run ESLint
      run: npm run lint
      
    - name: 🎨 Check Prettier formatting
      run: npm run format:check
      
    - name: 🔒 Security audit
      run: npm run security:audit
      continue-on-error: true # Don't fail build on audit warnings
      
    - name: 📊 Upload ESLint results
      uses: github/super-linter@v4
      if: always()
      env:
        DEFAULT_BRANCH: main
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        LINTER_RULES_PATH: /
        VALIDATE_ALL_CODEBASE: false
        VALIDATE_JAVASCRIPT_ES: true
        VALIDATE_TYPESCRIPT_ES: true

  # ============================================================================
  # TESTING WITH DATABASE
  # ============================================================================
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    needs: quality
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: car_dealer_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📥 Install dependencies
      run: npm ci
      
    - name: 🗃️ Setup test database
      run: |
        npx prisma migrate deploy
        npx run db:seed
      env:
        DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/car_dealer_test
        
    - name: 🧪 Run unit tests
      run: npm run test:unit
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/car_dealer_test
        JWT_SECRET: test-secret-key
        
    - name: 🔗 Run integration tests
      run: npm run test:integration
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/car_dealer_test
        JWT_SECRET: test-secret-key
        
    - name: 📊 Generate coverage report
      run: npm run test:coverage
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/car_dealer_test
        JWT_SECRET: test-secret-key
        
    - name: 📈 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/lcov.info
        flags: backend
        name: car-dealer-api

  # ============================================================================
  # BUILD & PACKAGE
  # ============================================================================
  build:
    name: 🏗️ Build & Package
    runs-on: ubuntu-latest
    needs: [quality, test]
    
    permissions:
      contents: read
      packages: write
      
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📥 Install dependencies
      run: npm ci
      
    - name: 🏗️ Build application
      run: npm run build
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔑 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 📝 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: 🏗️ Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # ============================================================================
  # SECURITY SCANNING
  # ============================================================================
  security:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    
    permissions:
      security-events: write
      
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 📊 Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # ============================================================================
  # TRIGGER DEPLOYMENT (Only on main branch)
  # ============================================================================
  trigger-deploy:
    name: 🚀 Trigger Deployment
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 🚀 Trigger Infrastructure Deployment
      uses: peter-evans/repository-dispatch@v2
      with:
        token: ${{ secrets.DEPLOYMENT_TOKEN }}
        repository: premier-auto-systems/car-dealer-infrastructure
        event-type: deploy-service
        client-payload: |
          {
            "service": "car-dealer-api",
            "image": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}",
            "environment": "staging",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "actor": "${{ github.actor }}"
          }